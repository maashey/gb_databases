-- Практическое задание по теме «Операторы, фильтрация, сортировка и ограничение»

-- 1. 
-- Пусть в таблице users поля created_at и updated_at оказались незаполненными. Заполните их текущими датой и временем.

UPDATE users 
   SET created_at = NOW(), 
	   updated_at = NOW(); 


-- 2. 
-- Таблица users была неудачно спроектирована. 
-- Записи created_at и updated_at были заданы типом VARCHAR и в них долгое время помещались значения 
-- в формате 20.10.2017 8:10. Необходимо преобразовать поля к типу DATETIME, сохранив введённые ранее значения.
#SELECT STR_TO_DATE('20.10.2017 8:10', '%d.%m.%Y %h:%i') AS datetime;
	  
UPDATE users
   SET created_at = STR_TO_DATE(created_at, '%d.%m.%Y %h:%i'),
	   updated_at = STR_TO_DATE(updated_at, '%d.%m.%Y %h:%i'),;
	   
	  
-- 3. 
-- В таблице складских запасов storehouses_products в поле value могут встречаться самые разные цифры: 
-- 0, если товар закончился и выше нуля, если на складе имеются запасы. Необходимо отсортировать записи таким образом, 
-- чтобы они выводились в порядке увеличения значения value. Однако нулевые запасы должны выводиться в конце, после всех записей.
	  
SELECT * FROM storehouses_products ORDER BY 1/value DESC;


-- 4
-- (по желанию) Из таблицы users необходимо извлечь пользователей, родившихся в августе и мае. 
-- Месяцы заданы в виде списка английских названий (may, august)

SELECT * FROM users 
 WHERE MONTHNAME(birthday_at) IN ('may', 'august');


-- 5
-- (по желанию) Из таблицы catalogs извлекаются записи при помощи запроса. 
-- SELECT * FROM catalogs WHERE id IN (5, 1, 2); 
-- Отсортируйте записи в порядке, заданном в списке IN.

SELECT * FROM temp WHERE id IN (5, 1, 2) ORDER BY id % 5;



-- Практическое задание теме «Агрегация данных»

-- 1.
-- Подсчитайте средний возраст пользователей в таблице users.

SELECT AVG(TIMESTAMPDIFF(YEAR, birthday_at,  NOW())) FROM users;


-- 2.
-- Подсчитайте количество дней рождения, которые приходятся на каждый из дней недели. 
-- Следует учесть, что необходимы дни недели текущего года, а не года рождения.

# заменяем год в дате рождения на текущий, вычисляем для полученной даты день недели с помощью функции DAYOFWEEK() и группируем по этому полю
SELECT 
	DAYOFWEEK(DATE_FORMAT(birthday_at,'2021-%m-%d')) AS day_of_b, 
	COUNT(*) 
FROM users 
GROUP BY day_of_b
ORDER BY day_of_b;


-- 3.
-- (по желанию) Подсчитайте произведение чисел в столбце таблицы.

# решение я не придумала, но нашла в интернете формулу с логарифмом:
SELECT exp(SUM(LOG(id))) AS product, GROUP_CONCAT(id ORDER BY id) 
FROM users
# разбила для удобства на группы по 3 значения
GROUP BY id DIV 3;



